import React, { FC, useState } from 'react';
import * as routes from '../../Constants/Routes_MODIF';
import { RouteComponentProps } from 'react-router';
import { useDocumentTitle } from '../../Hooks/useDocumentTitle';
import { RegistrationPage } from './Assets/Styles';
import { IntroductionSection } from './Sections/IntroductionSection';
import { AccommdationSection } from './Sections/AccommodationSection';
import { OrdersSection } from './Sections/OrdersSections';
import { CheckboxQuestionSection } from './Sections/QuestionSectionCheckbox';
import { RadioQuestionSection } from './Sections/QuestionSectionRadio';
import { TextQuestionSection } from './Sections/QuestionSectionText';
import { SelectQuestionSection } from './Sections/QuestionSectionSelect';
import { BasicInformationSection } from './Sections/BasicInformationSection';
import { Formik, FieldArray } from 'formik';
import { Button } from '../../Components/Button/Button';
import Icons from '../../Components/Icons/icons';
import { AutoFormDebug } from '../../Utils/FormDebug';
import { SelectBase } from '../../Components/Select/Select';

interface RegistrationRouteProps {
	id: string;
}

type formProps = RouteComponentProps<RegistrationRouteProps>;

interface IRegistrationForm {
	images: {
		header?: string;
		logo?: string;
	};
	sections: RegistrationFormSection[];
}

enum SectionType {
	basicInformation,
	introduction,
	afterword,
	question_Checkbox,
	question_Radio,
	question_Text,
	question_Select,
	accommodation,
	orders,
	lectures
}
//*********************************************************** */
// Question Sections
//*********************************************************** */

export interface IQuestionSectionRadio {
	type: SectionType.question_Radio;
	content: {
		title: string;
		condition: boolean;
		options: { value: string; label: string }[];
	};
}

export interface IQuestionSectionSelect {
	type: SectionType.question_Select;
	content: {
		title: string;
		condition: boolean;
		options: { value: string; label: string }[];
	};
}

export interface IQuestionSectionCheckbox {
	type: SectionType.question_Checkbox;
	content: {
		title: string;
		condition: boolean;
		options: { checked: boolean; label: string }[];
	};
}

export interface IQuestionSectionText {
	type: SectionType.question_Text;
	content: {
		title: string;
		condition: boolean;
		label: string;
		value: string;
	};
}

//*********************************************************** */
//*********************************************************** */

export interface IAccommodationSection {
	type: SectionType.accommodation;
	content: { title: string };
}

export interface IIntroductionSection {
	type: SectionType.introduction;
	content: { headingtext: string; ingress?: string; start: Date; end: Date };
}

export interface IBasicInformationSection {
	type: SectionType.basicInformation;
	content: { title?: string; firstname?: string; lastname?: string };
}

interface IAfterwordSection {
	type: SectionType.afterword;
	content: any;
}

interface ILecturesSection {
	type: SectionType.lectures;
	content: any;
}

export interface IOrdersContent {
	type: SectionType.orders;
	content: {
		title: string;
		products: { name: string; value: number; avaibility: string }[];
	};
}

type RegistrationFormSection =
	| IBasicInformationSection
	| IAccommodationSection
	| IIntroductionSection
	| IAfterwordSection
	| ILecturesSection
	| IOrdersContent
	| IQuestionSectionRadio
	| IQuestionSectionCheckbox
	| IQuestionSectionText
	| IQuestionSectionSelect;

export interface ISectionHelpers {
	isInEditMode: boolean;
	disableDown: boolean;
	disableUp: boolean;
	moveUp: () => void;
	moveDown: () => void;
	remove: () => void;
}

const RenderSection = (section: RegistrationFormSection, helpers: ISectionHelpers) => {
	switch (section.type) {
		case SectionType.introduction:
			return <IntroductionSection section={section} helpers={helpers} />;

		case SectionType.afterword:
			return <div>Loppu</div>;

		case SectionType.basicInformation:
			return <BasicInformationSection section={section} helpers={helpers} />;

		case SectionType.orders:
			return <OrdersSection section={section} helpers={helpers} />;

		case SectionType.accommodation:
			return <AccommdationSection section={section} helpers={helpers} />;

		case SectionType.question_Radio:
			return <RadioQuestionSection content={section.content} helpers={helpers} />;

		case SectionType.question_Checkbox:
			return <CheckboxQuestionSection content={section.content} helpers={helpers} />;

		case SectionType.question_Text:
			return <TextQuestionSection content={section.content} helpers={helpers} />;

		case SectionType.question_Select:
			return <SelectQuestionSection content={section.content} helpers={helpers} />;

		default:
			return <h2>Lohkotyypille ei l√∂ytynyt render-metodia: {section.type}</h2>;
	}
};

export const Registration: FC<formProps> = ({ match }) => {
	useDocumentTitle('Ilmoittautumislomake');
	const [editing, setEditing] = useState(true);
	const [showJSON, setShowJSON] = useState(false);
	const [data, setData] = useState(MockRegistration);

	return (
		<RegistrationPage editing={editing}>
			<div className="registration">
				<nav className="registration__top">top</nav>

				<main className="registration__content">
					{data.images.header && (
						<div className="registration__content__header">
							<img
								src={data.images.header}
								alt=""
								className="registration__content__header__image"
							/>
						</div>
					)}

					<div className="TEST">
						<Button
							text={editing ? 'Esikatsele' : 'Muokkaa'}
							className="TEST__BUTTON"
							icon={Icons.edit}
							onClick={() => setEditing(!editing)}
						/>
						<Button
							text={showJSON ? 'Piilota JSON' : 'N√§yt√§ JSON'}
							className="TEST__BUTTON"
							icon={showJSON ? Icons.eye : Icons.eye_slash}
							onClick={() => setShowJSON(!showJSON)}
						/>
						<Button
							text={'Pohja #1 (Pitk√§)'}
							className="TEST__BUTTON TEST__BUTTON--THEME"
							icon={Icons.globe}
							onClick={() => setData(MockRegistration)}
						/>
						<Button
							text={'Pohja #2 (Lyhyt)'}
							className="TEST__BUTTON TEST__BUTTON--THEME"
							icon={Icons.globe}
							onClick={() => setData(MockRegistrationShort)}
						/>
						<Button
							text={'Pohja #3 (Kysymyksi√§)'}
							className="TEST__BUTTON TEST__BUTTON--THEME"
							icon={Icons.globe}
							onClick={() => setData(MockRegistrationQuestions)}
						/>

						<Button
							text={'Lis√§√§ Perustietolohko'}
							className="TEST__BUTTON TEST__BUTTON"
							icon={Icons.list}
							onClick={() => setData(MockRegistrationQuestions)}
						/>
						<Button
							text={'Lis√§√§ Valintaruutu'}
							className="TEST__BUTTON TEST__BUTTON"
							icon={Icons.list}
							onClick={() => setData(MockRegistrationQuestions)}
						/>
						<Button
							text={'Lis√§√§ Monivalinta'}
							className="TEST__BUTTON TEST__BUTTON"
							icon={Icons.list}
							onClick={() => setData(MockRegistrationQuestions)}
						/>
						<Button
							text={'Lis√§√§ '}
							className="TEST__BUTTON TEST__BUTTON"
							icon={Icons.list}
							onClick={() => setData(MockRegistrationQuestions)}
						/>
					</div>

					<Formik
						initialValues={data}
						onSubmit={(values) => alert(JSON.stringify(values, null, 2))}
					>
						{(formik) => (
							<>
								{showJSON ? (
									<AutoFormDebug />
								) : (
									<FieldArray name="sections">
										{(sectionHelpers) => {
											return formik.values.sections.map((section, index) => {
												const helpers = {
													isInEditMode: editing,
													disableUp: index === 0,
													disableDown: index === formik.values.sections.length - 1,
													moveUp: () => sectionHelpers.swap(index, index - 1),
													moveDown: () => sectionHelpers.swap(index, index + 1),
													remove: () => {
														if (window.confirm('Haluatko varmasti poistaa lohkon?')) {
															sectionHelpers.remove(index);
														}
													}
												};

												return RenderSection(section, helpers);
											});
										}}
									</FieldArray>
								)}
							</>
						)}
					</Formik>
				</main>

				<footer className="registration__footer">footer</footer>
			</div>
		</RegistrationPage>
	);
};

const MockRegistration: IRegistrationForm = {
	images: {
		header:
			'https://images.unsplash.com/photo-1518791841217-8f162f1e1131?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&w=1000&q=80'
	},
	sections: [
		{
			type: SectionType.introduction,
			content: {
				headingtext: 'Testitapahtuma',
				ingress:
					'T√§ss√§ perustapahtumassa on esiteltyn√§ kaikki peruslohkot. Suurimmassa osassa ei ole varsinaista toteutusta üò¢',
				start: new Date(2019, 11, 11),
				end: new Date(2020, 0, 3)
			}
		},
		{ type: SectionType.basicInformation, content: { title: 'Henkil√∂tiedot' } },
		{
			type: SectionType.question_Checkbox,
			content: {
				title: 'Suunnitteluty√∂st√§',
				condition: false,
				options: [
					{ label: 'Dynaamisten lohkojen rakentaminen on vaikeaa', checked: false }
				]
			}
		},
		{
			type: SectionType.question_Checkbox,
			content: {
				title: 'Kysymyksi√§ vai ajatuksia',
				condition: false,
				options: [
					{ label: 'Gerbiilit muuttavat kev√§isin Sipooseen', checked: false },
					{ label: 'Kukaan ei ole koskaan ollut tyhj√§ss√§ huoneessa', checked: false },
					{ label: 'Tummat teemat ovat turhia eik√∂ kukaan k√§yt√§ niit√§', checked: false }
				]
			}
		},
		{ type: SectionType.accommodation, content: { title: 'Majoituslohko' } },
		{
			type: SectionType.orders,
			content: {
				title: 'Tilauslohko',
				products: [
					{ name: 'Perustuote', value: 29.99, avaibility: '1294/3000' },
					{ name: 'Luxustuote', value: 299, avaibility: '4/30' },
					{ name: 'Superluxustuote', value: 3999.99, avaibility: '1/5' }
				]
			}
		},
		{
			type: SectionType.question_Radio,
			content: {
				title: 'Jos olet Anatidaephobiaani',
				condition: false,
				options: [
					{
						label: 'Pelk√§√§t, ett√§ jossakin on ankka, joka tuijottaa sinua',
						value: 'false'
					},
					{ label: 'Olet ankka, joka pelk√§√§, ett√§ joku tuijottaa sinua', value: 'true' },
					{ label: 'Gerbiili', value: 'true' }
				]
			}
		},
		{
			type: SectionType.question_Text,
			content: {
				title: 'Suosikki TV-sarjani on:',
				condition: false,
				label: 'tv-sarja',
				value: ''
			}
		},
		{
			type: SectionType.question_Select,
			content: {
				title: 'Olen eritt√§in v√§synyt',
				condition: false,
				options: [
					{
						label: 'Useimmiten',
						value: '1'
					},
					{
						label: 'Silloin t√§ll√∂in',
						value: '2'
					},
					{
						label: 'Jotenkuten',
						value: '3'
					},
					{
						label: 'Gerbiili',
						value: '4'
					}
				]
			}
		},
		{
			type: SectionType.question_Checkbox,
			content: {
				title: 'Jos olet Anatidaephobiaani',
				condition: false,
				options: [
					{
						label: 'Pelk√§√§t, ett√§ jossakin on ankka, joka tuijottaa sinua',
						checked: false
					},
					{ label: 'Olet ankka, joka pelk√§√§, ett√§ joku tuijottaa sinua', checked: false }
				]
			}
		}
	]
};

const MockRegistrationShort: IRegistrationForm = {
	images: {
		header:
			'https://cbsnews1.cbsistatic.com/hub/i/2016/09/29/d1a671d9-556e-468d-8639-159e2842f15b/logan-new-hamshire-cat-2016-09-29.jpg'
	},
	sections: [
		{
			type: SectionType.introduction,
			content: {
				headingtext: 'Kissatapahtuma',
				ingress:
					'Kissa eli kesykissa tai kotikissa (Felis catus, aiemmin Felis silvestris catus) on villikissasta (Felis silvestris) polveutuva ja petoel√§inten (Carnivora) lahkon kissael√§inten (Felidae) heimoon kuuluva kesy nis√§k√§slaji. Kissat ovat suosittuja lemmikkiel√§imi√§, ja etenkin maaseudulla ne ovat aina olleet hy√∂dyllisi√§ hiirten ja muiden tuholaisten pyydyst√§jin√§. ',
				start: new Date(2019, 11, 11),
				end: new Date(2020, 0, 3)
			}
		},
		{
			type: SectionType.basicInformation,
			content: {
				title: 'Kissatiedot',
				firstname: 'Kissan Etunimi',
				lastname: 'Kissan Sukunimi'
			}
		},

		{
			type: SectionType.question_Checkbox,
			content: {
				title: 'Kiss√§ni',
				condition: false,
				options: [
					{
						label: 'Pelk√§√§t, ett√§ jossakin on ankka, joka tuijottaa sinua',
						checked: false
					},
					{ label: 'Olet ankka, joka pelk√§√§, ett√§ joku tuijottaa sinua', checked: false }
				]
			}
		}
	]
};

const MockRegistrationQuestions: IRegistrationForm = {
	images: {
		header: 'https://i.ytimg.com/vi/XBPjVzSoepo/maxresdefault.jpg'
	},
	sections: [
		{
			type: SectionType.introduction,
			content: {
				headingtext: 'Tiedostelulomake',
				ingress:
					'T√§ll√§ lomakkeella ker√§√§mme t√§rke√§√§ tietoa sinusta ja l√§heisist√§si. Avaamalla t√§m√§n lomakkeet olet jo hyv√§ksynyt kaiken.',
				start: new Date(2019, 11, 11),
				end: new Date(2020, 0, 3)
			}
		},
		{ type: SectionType.basicInformation, content: { title: 'Perustiedot' } },
		{
			type: SectionType.question_Checkbox,
			content: {
				title: 'Jos olet Anatidaephobiaani',
				condition: false,
				options: [
					{
						label: 'Pelk√§√§t, ett√§ jossakin on ankka, joka tuijottaa sinua',
						checked: false
					},
					{ label: 'Olet ankka, joka pelk√§√§, ett√§ joku tuijottaa sinua', checked: false }
				]
			}
		},
		{
			type: SectionType.question_Checkbox,
			content: {
				title: 'Suunnitteluty√∂st√§',
				condition: false,
				options: [
					{
						label: 'Dynaaminen takink√§√§nt√∂ on poliitikon paras ominaisuus',
						checked: false
					},
					{
						label: 'Tehokas poliitikko muistuttaa enemm√§n tuulimylly√§ kuin asiamiest√§',
						checked: false
					},
					{ label: 'Kepulla ei ole asiaa hallitukseen', checked: false },
					{
						label: 'Jos ei t√§ht√§√§ tarpeeksi korkealle, kapsahtaa katajaan',
						checked: false
					},
					{
						label:
							'Gerbiileist√§ ei ole tehokkaiksi poliitikoiksi, mutta niist√§ saa erinomaisia asiamiehia',
						checked: false
					}
				]
			}
		},
		{
			type: SectionType.question_Radio,
			content: {
				title: 'Politiikan tehokkain ty√∂el√§in',
				condition: false,
				options: [
					{
						label: 'Ankka',
						value: 'false'
					},
					{ label: 'Supikoira', value: 'true' },
					{ label: 'Kenguru', value: 'true' },
					{ label: 'M√§yr√§koira', value: 'true' },
					{ label: 'Pyk√§l√§koira', value: 'true' },
					{ label: 'Viivoitin', value: 'true' },
					{ label: 'Kuplasammakko', value: 'true' },
					{ label: 'Gerbiili', value: 'true' }
				]
			}
		},
		{
			type: SectionType.question_Text,
			content: {
				title: 'Suosikki TV-sarjani on:',
				condition: false,
				label: 'tv-sarja',
				value: ''
			}
		},
		{
			type: SectionType.question_Text,
			content: {
				title: 'Valehtelit edellisess√§ kohdassa kirjoita t√§h√§n oikea vastaus',
				condition: false,
				label: 'tv-sarja',
				value: ''
			}
		},
		{
			type: SectionType.question_Select,
			content: {
				title: 'Olen eritt√§in v√§synyt',
				condition: false,
				options: [
					{
						label: 'Joissakin',
						value: '1'
					},
					{
						label: 'Listoissa',
						value: '2'
					},
					{
						label: 'Pit√§isi',
						value: '3'
					},
					{
						label: 'Olla',
						value: '4'
					},
					{
						label: 'Merkitt√§v√§sti',
						value: '5'
					},
					{
						label: 'V√§hemm√§n',
						value: '6'
					},
					{
						label: 'Vaihtoehtoja',
						value: '7'
					},
					{
						label: 'Mutta',
						value: '8'
					},
					{
						label: 'Ei',
						value: '9'
					},
					{
						label: 'Mahda',
						value: '10'
					},
					{
						label: 'Mit√§√§n',
						value: '11'
					}
				]
			}
		}
	]
};
